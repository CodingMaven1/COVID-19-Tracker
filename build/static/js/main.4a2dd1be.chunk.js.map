{"version":3,"sources":["components/card/Card.js","components/rowComponent/RowComponent.js","containers/main/Main.js","App.js","serviceWorker.js","index.js"],"names":["Card","className","this","props","title","number","id","children","Component","RowComponent","rowComponent","type","country","cases","todayCases","deaths","todayDeaths","recovered","Main","state","worldData","countryData","datachart","inputvalue","onChangeHandler","event","value","target","setState","Promise","all","fetch","then","res1","res2","json","stats","i","push","j","console","log","search","filteredCountry","filter","toLowerCase","includes","placeholder","onChange","map","element","index","key","ele","width","height","chartType","data","var","options","colorAxis","colors","backgroundColor","mapsApiKey","rootProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4a2dd1be.chunk.js","sourcesContent":["import React,{Component} from \"react\";\n\nimport './Card.css';\n\nclass Card extends Component {\n    render(){\n        return(\n            <div className=\"Card\">\n                <div className=\"Card--Heading\">\n                    <h1 className=\"Card--HeadingTitle\">{this.props.title}</h1>\n                    <h1 className=\"Card--HeadingNumber\">{this.props.number}</h1>\n                </div>\n                <div className=\"Card--Body\" id=\"Card-Scroll\">\n                    {this.props.children}\n                </div>\n            </div>\n        )\n    }\n\n}\n\nexport default Card;","import React from \"react\";\n\nimport './RowComponent.css';\n\nconst RowComponent = (props) => {\n    let rowComponent;\n    if(props.type === \"cases\"){\n        rowComponent = <div className=\"Row\">\n                         <h1 className=\"heading--1 headingtall\">{props.country}</h1>\n                         <h1 className=\"heading--1 headingshort\">{props.cases}</h1>\n                         <h1 className=\"heading--1 headingshort\">{props.todayCases}</h1>\n                       </div>\n    }\n    else if(props.type === \"deaths\"){\n        rowComponent = <div className=\"Row\">\n                         <h1 className=\"heading--2 headingtall\">{props.country}</h1>\n                         <h1 className=\"heading--2 headingshort\">{props.deaths}</h1>\n                         <h1 className=\"heading--2 headingshort\">{props.todayDeaths}</h1>\n                       </div>\n    }\n    else if(props.type === \"recovered\"){\n        rowComponent = <div className=\"Row\">\n                         <h1 className=\"heading--3 headingtall\">{props.country}</h1>\n                         <h1 className=\"heading--3 headingshort\">{props.recovered}</h1>\n                       </div>\n    }\n    return(\n        <div>\n            {rowComponent}\n        </div>\n    )\n}\n\nexport default RowComponent;","import React,{ Component } from \"react\";\nimport Chart from \"react-google-charts\";\n\nimport Card from '../../components/card/Card';\nimport RowComponent from '../../components/rowComponent/RowComponent';\nimport './Main.css';\n\nclass Main extends Component {\n\n    state = {\n        worldData : [],\n        countryData : [],\n        datachart : [[\"Country\",\"Cases\",\"Deaths\"]],\n        inputvalue: ''\n    }\n\n    componentDidMount(){\n        Promise.all([fetch('https://coronavirus-19-api.herokuapp.com/all'), fetch('https://coronavirus-19-api.herokuapp.com/countries') ])\n        .then(([res1,res2]) => {\n            return Promise.all([res1.json(), res2.json()])\n        })\n        .then(([res1,res2]) => {\n            let stats = []\n            let datachart = this.state.datachart\n            for(let i in res1){\n                stats.push({\n                    id : i,\n                    number : res1[i]\n                })\n            }\n            for(let j in res2){\n                datachart.push([\n                    res2[j].country, res2[j].cases, res2[j].deaths\n                ])\n            }\n            this.setState({ worldData : stats, countryData : res2, datachart : datachart})\n        })\n    }\n\n    onChangeHandler = (event) => {\n        let value;\n        value = event.target.value;\n        this.setState({inputvalue:value})\n    }\n\n    render(){\n        console.log(this.state);\n\n        const countryData = this.state.countryData;\n        const search = this.state.inputvalue;\n        \n        const filteredCountry = countryData.filter(country => country.country.toLowerCase().includes(search.toLowerCase()));\n\n        return(\n            <div className=\"Main\">\n                <div className=\"Main--LeftDiv\">\n                    <div className=\"Main--LeftDivSearch\">\n                        <h1 className=\"Main--LeftDivSearchTitle\">COVID-19 Live Tracker</h1>\n                        <input className=\"Main--LeftDivSearchInput\" type=\"search\" placeholder=\"Search Country\" \n                                value={this.state.inputvalue} onChange={event => this.onChangeHandler(event)} />\n                    </div>\n                    <div className=\"Main--LeftDivTables\">\n                        {\n                            this.state.worldData.map((element,index) => {\n                                return(\n                                    <Card key={index} title={element.id}  number={element.number}>\n                                    {   \n                                        filteredCountry.map((ele,index) => {\n                                            return(\n                                                <RowComponent \n                                                    key={index}\n                                                    country={ele.country} \n                                                    cases={ele.cases} \n                                                    todayCases={ele.todayCases} \n                                                    deaths={ele.deaths} \n                                                    todayDeaths={ele.todayDeaths}\n                                                    recovered={ele.recovered} \n                                                    type={element.id}/>\n                                            )\n                                        })  \n                                    }\n                                    </Card>\n                                )\n                            })\n\n                        }\n                    </div>\n                </div>\n                <div className=\"Main--RightDiv\">\n                    <div className=\"Main--RightDivChart\">\n                        <h1 className=\"Main--RightDivChartTitle\">World Map with Hotspots</h1>\n                        <Chart\n                            width={'700px'}\n                            height={'500px'}\n                            chartType=\"GeoChart\"\n                            data={this.state.datachart}\n                            var options={{\n                                colorAxis: {colors: ['#FF9999', '#FF5959', '#FF3232']},\n                                backgroundColor: \"#0f0f1d\"\n                            }}\n                            mapsApiKey=\"AIzaSyB1PdGk5hG5ugltxvtfF96VTIYL0MVmQaw\"\n                            rootProps={{ 'data-testid': '1' }}\n                            />\n                    </div>\n                    <div className=\"Main--RightDivNews\">\n                        <h1 className=\"Main--RightDivChartTitle\">News on COVID-19</h1>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Main;","import React from 'react';\n\nimport Main from './containers/main/Main';\nimport './App.css';\n\nfunction App() {\n  \n  return (\n    <div>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}